%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Assignment 4 SPEE Spring 2018
% Carles Estrada Girbau
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

clear all; close all force;

%% --- Simulation parameters

% AR Process is generated by entering a unit-variance white Gaussian signal
% into the filter with the coefficients B(z)/A(z) specified below: 
beta     = 0.9;
coefs_Bz = (1);                % Coefficients of numerator polynomial
coefs_Az = poly([beta*exp(1i*pi/4),beta*exp(-1i*pi/4)]); % Coefficients of denominator polynomial

N          = 1024; % Number of samples employed for PSD estimation
Nr_of_freq = 2*N; % Nr of frequencies where estimators are computed

% Blackman-Tukey estimator parameters
M_BT          = 16; % :The window applied to the autocorrelation goes from -M_BT to +M_BT
window_on_rxx = bartlett(2*M_BT+1); % Window applied to the autocorrelation estimate. For example: rectwin(11) generates
window_BT = window_on_rxx;
%                     % a rectangular window (i.e. a pulse) of length 11

% Welch estimator parameters
M_W = 16; % The modified periodograms have length M_W
D   = M_W/2; % The time shift between consecutive segments
window_on_data = rectwin(M_W); % Window applied to each observation segment
window_equivalent = triang(2*(M_W-1)+1); % Equivalent window applied to autocorrelation. It's only a supposition.
K   = ((N-M_W)/D)+1; % Number of overlapping segments averaged in Welch's estimator
R   = (1/M_W)*sum(window_on_data.^2); % Window normalization to get unbiased power estimates

% Other parameters
L_plot    = 30; % Number of plots that are depicted of each estimator in figures 2 and 3. You may change
                % this value
L_average = 500;% Number of signal realizations employed to compute estimator statistics
if M_W-1 > M_BT
    M_rxx = M_W-1;
else
    M_rxx = M_BT;
end

%% --- Preliminaries

% Plot of the true power spectral density of the process:
[h,w]=freqz(coefs_Bz,coefs_Az,Nr_of_freq,'whole'); % Compute filter's frequency response
figure(1); plot (w/(2*pi),abs(h).^2);              % Plot signal's true power spectral density
title('True power spectral density');
ylabel ('$$S_{xx}(f)$$','interpreter','latex');
xlabel('$$f$$','interpreter','latex')

% Compute impulse response length to assess transient duration
[imp_resp,temp] = impz(coefs_Bz,coefs_Az);
Input_length    = length(imp_resp)+N; % Number of samples to be filtered to generate the signal

frequencies     = (0:Nr_of_freq-1)/Nr_of_freq; % Frequencies where the PSD is estimated


%% --- Generate signal and estimate PSD

% Initialize variables employed for averaging
Welch_average = zeros(1,Nr_of_freq); % Store here the mean value of the Welch estimator
BT_average    = zeros(1,Nr_of_freq);
rxx_average   = zeros(1,M_BT+1);
Welch_var     = 0; % Variable used to estimate the Welch variance at pi

%--- 1. Plot "L_plot" realizations of Blackman-Tukey and Welch estimatorsa along with the true spectrum

for jj=1:L_plot

    % Generate process samples
    x      = filter(coefs_Bz,coefs_Az,randn(1,Input_length));
    Signal = x(length(imp_resp)+1:length(imp_resp)+N); % Get rid  of transient response samples 


    % Compute Welch estimator at the frequencies stored in 'frequencies' vector
    windowed_signal = zeros(K,M_W);
    welchK          = zeros(K,Nr_of_freq);
    for iK = 1:K
        windowed_signal(iK,:) = Signal((iK-1)*D+1:(iK-1)*D+M_W).*(window_on_data)';
        welchK(iK,:)          = (1/(M_W*R))*(abs(fft(windowed_signal(iK,:),Nr_of_freq)).^2);
    end
    Welch = (1/K)*sum(welchK);
        
    % Depict the Welch estimate
    figure(2);
    plot (frequencies,Welch, 'r');axis([0,1,0,60])
    hold on

    % Compute BlackmanTukey estimator
    rxx                                        = biased_autocorr_estimate(Signal,M_rxx);
    windowed_rxx                               = zeros(1,Nr_of_freq);
    windowed_rxx(1:M_BT+1)                     = rxx(1:M_BT+1)'.*window_on_rxx(M_BT+1:end)';
    windowed_rxx(Nr_of_freq-M_BT+1:Nr_of_freq) = rxx(M_BT+1:-1:2)'.*window_on_rxx(1:M_BT)';
    BlackmanTukey                              = real(fft(windowed_rxx,Nr_of_freq));

    % Depict the Blackman-Tukey estimate at the frequencies stored in 'frequencies' vector
    figure(3);
    plot(frequencies,BlackmanTukey, 'r'); axis([0,1,0,60]); 
    hold on;
    
    % Compute mean value
    oldWelch_avg  = Welch_average(N);
    Welch_average = Welch_average+(Welch-Welch_average)/jj; % Update the mean value estimates
    BT_average    = BT_average+(BlackmanTukey-BT_average)/jj;
    rxx_average    = rxx_average+(rxx-rxx_average)/jj;
    Welch_var     = ((jj-1)*(Welch_var)+(Welch(N)-oldWelch_avg)*(Welch(N)-Welch_average(N)))/jj;
end
figure(2); 
plot (w/(2*pi),abs(h).^2,'b');
title ('Blue- True PSD, Red- Welch estimator');
ylabel ('$$S_{xx}(f)$$, $$\hat{S}_{Welch}(f)$$','interpreter','latex');
xlabel('$$f$$','interpreter','latex')

figure(3);
plot (w/(2*pi),abs(h).^2,'b');
title ('Blue- True PSD, Red- BT estimator');
ylabel ('$$S_{xx}(f)$$, $$\hat{S}_{BT}(f)$$','interpreter','latex');
xlabel('$$f$$','interpreter','latex')

%--- 2. Assessment of mean and variance of the PSD of the AR process
%---    with Blackman-Tukey and Welch estimators

% Compute the average
for jj_avg=1:L_average-L_plot

    % Generate process samples
    x      = filter(coefs_Bz,coefs_Az,randn(1,Input_length));
    Signal = x(length(imp_resp)+1:length(imp_resp)+N); % Get rid  of transient response samples
    

    % Compute Welch estimator at the frequencies stored in 'frequencies' vector
    windowed_signal = zeros(K,M_W);
    welchK          = zeros(K,Nr_of_freq);
    for iK = 1:K
        windowed_signal(iK,:) = Signal((iK-1)*D+1:(iK-1)*D+M_W).*(window_on_data)';
        welchK(iK,:)          = (1/(M_W*R))*(abs(fft(windowed_signal(iK,:),Nr_of_freq)).^2);
    end
    Welch = (1/K)*sum(welchK);
    
    % Compute BlackmanTukey estimator
    rxx                                        = biased_autocorr_estimate(Signal,M_rxx);
    windowed_rxx                               = zeros(1,Nr_of_freq);
    windowed_rxx(1:M_BT+1)                     = rxx(1:M_BT+1)'.*window_on_rxx(M_BT+1:end)';
    windowed_rxx(Nr_of_freq-M_BT+1:Nr_of_freq) = rxx(M_BT+1:-1:2)'.*window_on_rxx(1:M_BT)';
    BlackmanTukey                              = real(fft(windowed_rxx,Nr_of_freq));
    
    % Compute mean value
    oldWelch_avg  = Welch_average(N);
    Welch_average = Welch_average+(Welch-Welch_average)/(jj_avg+jj); % Update the mean value estimates
    BT_average    = BT_average+(BlackmanTukey-BT_average)/(jj_avg+jj);
    rxx_average    = rxx_average+(rxx-rxx_average)/(jj_avg+jj);
    Welch_var     = ((jj_avg+jj-1)*(Welch_var)+(Welch(N)-oldWelch_avg)*(Welch(N)-Welch_average(N)))/(jj_avg+jj);
end

% Estimation of the equivalent window on autocorrelation of the Welch estimator

rxx_window = zeros(1,Nr_of_freq);
rxx_window(1:M_W) = rxx_average(1:M_W);
rxx_window(end-M_W+2:end) = rxx_average(M_W:-1:2);
window = (ifft(Welch_average))./rxx_window;
window_W = zeros(1,2*(M_W-1)+1);
window_W(1:M_W) = window(Nr_of_freq-M_W+1:end);
window_W(end-M_W+1:end) = window(1:M_W);

% Calculation of bias at frequency pi and pi/4

pi_T = abs(h(N)).^2;
pi_W = Welch_average(N);
pi_BT = BT_average(N);
bias_W = pi_W - pi_T;
bias_BT = pi_BT - pi_T;

pi4_T = abs(h(N/4)).^2;
pi4_W = Welch_average(N/4);
pi4_BT = BT_average(N/4);
bias4_W = pi4_W - pi4_T;
bias4_BT = pi4_BT - pi4_T;

% Depict results

figure (4);
plot (w/(2*pi),abs(h).^2,'b'); % Plot mean value vs true spectrum
hold on;
plot(frequencies,Welch_average,'r')
hh  =plot(frequencies,BT_average,'k');
ylabel ('$$S_{xx}(f)$$, $$\hat{S}_{Welch}(f)$$, $$\hat{S}_{BT}(f)$$','interpreter','latex');
xlabel('$$f$$','interpreter','latex')

legend ('true PSD','Welch','Blackman Tukey')
hold off

fprintf('\nThe variance of the Welch estimator at frequency pi is: %d\n',Welch_var) % Show variance
fprintf('\nThe bias of the Welch estimator at frequency pi is: %0.4f\n',bias_W) % Show Welch bias
fprintf('The bias of the Blackman-Tukey estimator at frequency pi is: %0.4f\n',bias_BT) % Show BT bias
fprintf('\nThe bias of the Welch estimator at frequency pi/4 is: %0.4f\n',bias4_W) % Show Welch bias
fprintf('The bias of the Blackman-Tukey estimator at frequency pi/4 is: %0.4f\n\n',bias4_BT) % Show BT bias

ww = wvtool(window_equivalent,window_W);